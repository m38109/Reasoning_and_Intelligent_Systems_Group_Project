# Genetic Algorithm to Solve a 4x4 Letter Grid Puzzle

Function InitializePopulation(size, grid)
    population = []
    For i to size Do
        new_grid = copy(grid)
        For i to size Do
        new_grid = copy(grid)
        For each row in a grid
            missing_letter = LETTER - exiting letter
            fill in empty cell with the missing_letter in random order
        End For
        population.append(new_grid)
    End For
    return population
End Function


#The goal is to find any individual total_conflict = 0, lower is better
Function Fitness(grid)
    row_conflict = CountRowConflicts(grid)
    column_conflict = CountColumnConflicts(grid)
    sub_grid_conflict = CountSubGridConflicts(grid)
    total_conflict = row_conflict + column_conflict + sub_grid_conflict
    return total_conflict
End Function

Function Tournament_Selection(population, tournament_size)
    best_grid = Null
    best_fitness = Infinity
    For i to tournament_size Do
        candidate = Random individual from population
        candidate_fitness = Fitness(candidate)
        If candidate_fitness < best_fitness Then
            best_grid = candidate
            best_fitness = candidate_fitness
        End If
    End For
    return best_grid
End Function

Function Parents_selection(population, tournament_size)
    select different parents via tournament_selection
    return parent1, parent2
End Function

Function Crossover(parent1, parent2)
    crossover_point = Random number between 1 and 3
    child= copy(parent1)
    For i from crossover_point to 3 Do #
        For j in range(4)
        child[i][j] = parent2[i][j]
    End For
    return child
End Function

#Create mutation, set the rate to 10%
Function Mutation(grid):
    mutation_rate = 0.1
    For each row in grid Do:
        IF Random number < mutation_rate THEN:
            ROTATE ROW left or right
    End For
    return grid
End Function

#Main Genetic algorithm function
#1. Create initial population
#2. Calculate the fitness
#3. Select parents
#4. Crossover
#5. Allow Mutation
#5. Terminate if fitness is 0
Function GeneticAlgorithm(initial_grid, max_generations, tournament_size, population_size, target_word)
    population = InitializePopulation(population_size, initial_grid)
    solutions = {}

    For generation from 1 to max_generations Do
        sorted_population = Sort population by Fitness (ascending order)

        # Check for solutions
        For each individual in sorted_population Do
            If Fitness(individual) == 0 Then
                solutions.append(individual)
        End For


        new_population = top 4 individual
        While new_population size < population_size Do
            parent1, parent2 = Parents_selection(population, tournament_size)
            child = Crossover(parent1, parent2)
            mutated_child = mutation(child, initial_grid)
            new_population.append(mutated_child)

        population = new_population
    End For


    Return Solutions or "No solution found, reached the max generation"

End Function

# Utility Functions

Function CountRowConflicts(grid)
    row_conflict = 0
    For each row in grid Do
        uniqueLetters = CountDistinct(row)
        row_conflict = row_conflict + (GridSize - uniqueLetters)  # Calculate conflicts
    End For
    Return row_conflict
End Function

Function CountColumnConflicts(grid)
    column_conflict = 0
    For col from 0 to GridSize - 1 Do
        columnValues = GetColumn(grid, col)
        uniqueLetters = CountDistinct(columnValues)
        column_conflict = column_conflict + (GridSize - uniqueLetters) # Calculate conflicts
    End For
    Return column_conflict
End Function

Function CountSubGridConflicts(grid)
    sub_grid_conflict = 0
    For subRow from 0 to SubgridSize - 1 Do
        For subCol from 0 to SubgridSize - 1 Do
            subgridValues = GetSubgrid(grid, subRow, subCol)
            uniqueLetters = CountDistinct(subgridValues)
            sub_grid_conflict = sub_grid_conflict + (GridSize - uniqueLetters) # Calculate conflicts
        End For
    End For
    Return sub_grid_conflict
End Function

Function GetColumn(grid, col):
    columnValues = []
    For row from 0 to GridSize - 1 Do:
        columnValues.append(grid[row][col])
    End For
    Return columnValues
End Function

Function GetSubgrid(grid, subRow, subCol):
    subgridValues = []
    startRow = subRow * SubgridSize
    startCol = subCol * SubgridSize
    For row from startRow to startRow + SubgridSize - 1 Do:
        For col from startCol to startCol + SubgridSize - 1 Do:
            subgridValues.append(grid[row][col])
        End For
    End For
    Return subgridValues
End Function
